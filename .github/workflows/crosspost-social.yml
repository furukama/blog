name: Post to Bluesky

on:
  push:
    paths:
      - 'content/posts/*.md'
    branches:
      - main
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test with existing post'
        required: false
        default: 'true'

jobs:
  crosspost:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install atproto>=0.0.48 pyyaml requests
      
      - name: Find post to share
        id: find_post
        run: |
          if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
            POST="content/posts/the-end-of-the-library.md"
          else
            POST=$(git diff --name-only HEAD~1 HEAD | grep '^content/posts/.*\.md$' | grep -v '_index.md' | head -n1 || true)
          fi
          
          if [ -n "$POST" ]; then
            echo "post_path=$POST" >> $GITHUB_OUTPUT
            echo "Found post: $POST"
          fi
      
      - name: Post to Bluesky
        if: steps.find_post.outputs.post_path
        env:
          # Bluesky
          BLUESKY_HANDLE: ${{ secrets.BLUESKY_HANDLE }}
          BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
          POST_PATH: ${{ steps.find_post.outputs.post_path }}
        run: |
          python3 << 'EOF'
          import os
          import yaml
          import json
          from atproto import Client as BlueskyClient
          
          # Read post
          post_path = os.environ['POST_PATH']
          print(f"Processing: {post_path}")
          
          with open(post_path, 'r') as f:
              content = f.read()
          
          # Extract metadata
          if content.startswith('---'):
              parts = content.split('---', 2)
              metadata = yaml.safe_load(parts[1])
              
              title = metadata.get('title', 'New post')
              description = metadata.get('description', '')
              
              # Create URL
              filename = os.path.basename(post_path).replace('.md', '')
              url = f"https://furukama.com/post/{filename}/"
              
              # Compose post text
              post_text = f"üìù {title}\n\n{description}\n\n{url}"
              
              # Ensure reasonable length for Bluesky (300 chars)
              if len(post_text) > 300:
                  available = 300 - len(url) - 10
                  text = f"üìù {title} - {description}"[:available] + "..."
                  post_text = f"{text}\n\n{url}"
              
              print(f"\nPost ({len(post_text)} chars):")
              print("="*50)
              print(post_text)
              print("="*50)
              
              # Initialize results
              bluesky_uri = None
              
              # Check if already posted to Bluesky
              existing_bluesky_uri = metadata.get('social', {}).get('bluesky_uri')
              if existing_bluesky_uri:
                  print("‚úÖ Already posted to Bluesky, skipping")
                  bluesky_uri = existing_bluesky_uri
              else:
                  # Post to Bluesky
                  try:
                      if os.environ.get('BLUESKY_HANDLE') and os.environ.get('BLUESKY_PASSWORD'):
                          bluesky = BlueskyClient()
                          bluesky.login(
                              os.environ['BLUESKY_HANDLE'],
                              os.environ['BLUESKY_PASSWORD']
                          )
                          
                          # Create post with facets (link card)
                          post = bluesky.send_post(
                              text=post_text,
                              facets=[{
                                  "index": {"byteStart": post_text.find(url), "byteEnd": post_text.find(url) + len(url)},
                                  "features": [{"$type": "app.bsky.richtext.facet#link", "uri": url}]
                              }]
                          )
                          bluesky_uri = post.uri
                          bluesky_rkey = post.uri.split('/')[-1]
                          print(f"‚úÖ Bluesky: https://bsky.app/profile/{os.environ['BLUESKY_HANDLE']}/post/{bluesky_rkey}")
                      else:
                          print("‚ö†Ô∏è  Bluesky: No credentials provided, skipping")
                  except Exception as e:
                      print(f"\n‚ùå Bluesky error: {e}")
              
              # Update post metadata with social links
              if bluesky_uri:
                  print("\nüìù Updating post with social media links...")
                  
                  # Add social media links to front matter
                  metadata['social'] = metadata.get('social', {})
                  metadata['social']['bluesky_uri'] = bluesky_uri
                  
                  # Rewrite file with updated metadata
                  new_content = f"---\n{yaml.dump(metadata, default_flow_style=False)}---{parts[2]}"
                  
                  with open(post_path, 'w') as f:
                      f.write(new_content)
                  
                  print("‚úÖ Post metadata updated with social links")
          EOF