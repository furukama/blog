name: Debug Social Media Auth

on:
  workflow_dispatch:

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Check secrets exist
        run: |
          echo "Checking which secrets are configured..."
          echo ""
          echo "Twitter/X secrets:"
          [ -n "${{ secrets.TWITTER_API_KEY }}" ] && echo "✅ TWITTER_API_KEY is set" || echo "❌ TWITTER_API_KEY is missing"
          [ -n "${{ secrets.TWITTER_API_SECRET }}" ] && echo "✅ TWITTER_API_SECRET is set" || echo "❌ TWITTER_API_SECRET is missing"
          [ -n "${{ secrets.TWITTER_ACCESS_TOKEN }}" ] && echo "✅ TWITTER_ACCESS_TOKEN is set" || echo "❌ TWITTER_ACCESS_TOKEN is missing"
          [ -n "${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}" ] && echo "✅ TWITTER_ACCESS_TOKEN_SECRET is set" || echo "❌ TWITTER_ACCESS_TOKEN_SECRET is missing"
          echo ""
          echo "Bluesky secrets:"
          [ -n "${{ secrets.BLUESKY_HANDLE }}" ] && echo "✅ BLUESKY_HANDLE is set" || echo "❌ BLUESKY_HANDLE is missing"
          [ -n "${{ secrets.BLUESKY_PASSWORD }}" ] && echo "✅ BLUESKY_PASSWORD is set" || echo "❌ BLUESKY_PASSWORD is missing"
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install tweepy atproto
      
      - name: Test Twitter Auth
        if: ${{ secrets.TWITTER_API_KEY != '' }}
        env:
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        run: |
          python3 << 'EOF'
          import os
          import tweepy
          
          print("Testing Twitter authentication...")
          
          try:
              # Test with v2 client
              client = tweepy.Client(
                  consumer_key=os.environ['TWITTER_API_KEY'],
                  consumer_secret=os.environ['TWITTER_API_SECRET'],
                  access_token=os.environ['TWITTER_ACCESS_TOKEN'],
                  access_token_secret=os.environ['TWITTER_ACCESS_SECRET']
              )
              
              # Try to get authenticated user
              me = client.get_me()
              
              if me and me.data:
                  print(f"✅ Twitter auth successful! Authenticated as @{me.data.username}")
                  print(f"   User ID: {me.data.id}")
                  print(f"   Name: {me.data.name}")
              else:
                  print("❌ Twitter auth failed: Could not retrieve user info")
                  
          except tweepy.TweepyException as e:
              print(f"❌ Twitter auth failed: {e}")
              if hasattr(e, 'response') and e.response:
                  print(f"   Response: {e.response.text}")
          except Exception as e:
              print(f"❌ Twitter auth failed with unexpected error: {e}")
          EOF
      
      - name: Test Bluesky Auth
        if: ${{ secrets.BLUESKY_HANDLE != '' }}
        env:
          BLUESKY_HANDLE: ${{ secrets.BLUESKY_HANDLE }}
          BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
        run: |
          python3 << 'EOF'
          import os
          from atproto import Client
          
          print("\nTesting Bluesky authentication...")
          print(f"Handle: {os.environ['BLUESKY_HANDLE']}")
          
          try:
              client = Client()
              profile = client.login(
                  os.environ['BLUESKY_HANDLE'],
                  os.environ['BLUESKY_PASSWORD']
              )
              
              print(f"✅ Bluesky auth successful!")
              print(f"   DID: {profile.did}")
              print(f"   Handle: {profile.handle}")
              if hasattr(profile, 'display_name'):
                  print(f"   Display name: {profile.display_name}")
                  
          except Exception as e:
              print(f"❌ Bluesky auth failed: {e}")
              print("\nCommon issues:")
              print("1. Make sure BLUESKY_HANDLE is your full handle (e.g., 'user.bsky.social')")
              print("2. Make sure BLUESKY_PASSWORD is an app password from https://bsky.app/settings/app-passwords")
              print("3. App passwords are one-time generated strings, not your main password")
          EOF